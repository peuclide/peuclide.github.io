library(tidyverse)
xdf %>%
count(parts, wt = vals)
df
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white", flip = TRUE)
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white", flip = TRUE)
?GeomWaffle
?geom_waffle
(
ggplot(data = waffle_iron(mpg, aes_d(group = class)), aes(x, y, fill = group)) +
geom_waffle() +
coord_equal()
ggplot(data = waffle_iron(mpg, aes_d(group = class)), aes(x, y, fill = group)) +
geom_waffle() +
coord_equal()
mpg
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df <- read.csv("./Desktop/syds_df.csv")
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
df
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
df <- read.csv("./Desktop/syds_df.csv")
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df
df <- read.csv("./Desktop/syds_df_2.csv")
df
str(df)
df  %>%
ggplot(aes(fill = month, x,y,values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df  %>%
ggplot(aes(x,y,fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df  %>%
ggplot(aes(x,y,fill = month,)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
library(tidyverse)
#library(hrbrthemes)
library(waffle)
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
xdf
ggplot(xdf, aes(fill=parts, values=values)) +
geom_waffle(color = "white", size=1.125, n_rows = 6) +
facet_wrap(~fct, ncol=1) +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
#ggthemes::scale_fill_tableau(name=NULL) +
coord_equal() +
labs(
title = "Faceted Waffle Geoms"
) +
#theme_ipsum_rc(grid="") +
theme_enhance_waffle()
#library(hrbrthemes)
library(waffle)
?waffle
parts <- c(80, 30, 20, 10)
chart <- waffle(parts, rows=8)
print(chart)
df
df
df <- read.csv("./Desktop/syds_df.csv")
df
df <- read.csv("./Desktop/syds_df_2.csv")
df
parts <- c(1,3,6)
chart <- waffle(parts, rows=2)
print(chart)
unimpared <- c(6,3,1)
impared <- c(1,3,6)
unimpared <- c(6,3,1)
chart1 <- waffle(impared, rows=2)
char2 <- waffle(unimpared, rows = 2)
chart2 <- waffle(unimpared, rows = 2)
chart1
chart2
install.packages(ggpubr)
install.packages(ggp"ubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(waffle)
library(tidyverse)
library(ggpubr)
chart1 <- waffle(impared, rows=2, flip=T)
chart2 <- waffle(unimpared, rows = 2, flip =T)
impared <- c(1,3,6)
unimpared <- c(6,3,1)
chart1 <- waffle(impared, rows=2, flip=T)
chart2 <- waffle(unimpared, rows = 2, flip =T)
chart1
ggarrange(chart1, chart2)
waffle()
?waffle
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired")
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired")
ggarrange(chart1, chart2)
ggarrange(chart1, chart2, colors = c("white", "gray", "black"))
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired", colors = c("white", "gray", "black"))
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired", colors = c("white", "gray", "black"))
ggarrange(chart1, chart2)
ggarrange(chart2, chart1 )
?ggarragne
?ggarrange
ggarrange(chart2, chart1, common.legend = T )
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
waffle
?waffle
df
5
impared <- c("3"=1,"15"=3,"22"=6)
unimpared <- c("3"=6,"15"=3,"22"=1)
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))+them_bw
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
ggplot(xdf, aes(fill=parts, values=values)) +
geom_waffle(color = "white", size=1.125, n_rows = 6) +
facet_wrap(~fct, ncol=1) +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
ggthemes::scale_fill_tableau(name=NULL) +
coord_equal() +
labs(
title = "Faceted Waffle Geoms"
) +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
class(chart1)
chat1+theme_bw()
chart1+theme_bw()
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart1+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart1+theme_bw()
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))
chart2+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
ggarrange(chart2+theme_bw(), chart1+theme_bw(), common.legend = T, legend = "right" )
chart1 <- chart1+theme_bw()
chart2 <- chart2+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
install.packages("installr")
LTRM <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/LTRM_totalcatch_2016_2018.csv")
MC <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/MC_totalcatch_2017_2018.csv")
UMR19 <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/UMR19_totalcatch_2018.csv")
names <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/namebridge.csv")
library(tidyverse)
head(LTRM)
head(LTRM)
LTRM %>% left_join(names[,c("com_name", "ltrm_name")], by ="ltrm_name")
LTRM %>% left_join(.,names[,c("com_name", "ltrm_name")], by ="ltrm_name")
x <- LTRM %>% left_join(.,names[,c("com_name", "ltrm_name")], by ="ltrm_name")
View(x)
names[,c("com_name", "ltrm_name")]
names[,c("com_name", "ltrm_name")]
View(LTRM)
View(names[,c("ltrm_names", "com_name")])
View(names[,c("ltrm_names", "com_names")])
View(names[,c("com_name", "ltrm_name")])
View(MC)
x <- left_join(LTRM,names[names$lter_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")], by ="ltrm_name")
View(x)
test <- names[names$lter_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
test
View(test)
names$lter_name
test <- names[names$ltrm_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
test
View(test)
View(LTRM)
names <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/namebridge.csv")
test <- names[names$ltrm_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
View(test)
x <- left_join(LTRM,, by ="ltrm_name")
unique(LTRM$ltrm_name)
unique(names[names$ltrm_name)
unique(names[names$ltrm_name])
unique(names$ltrm_name)
x <- read.csv("./OneDrive - UWSP/Panel6_609loci_WL.csv")
devtools::install_github("nstrayer/datadrivencv")
library(datadrivencv)
# run ?datadrivencv::use_datadriven_cv to see more details
datadrivencv::use_datadriven_cv(
full_name = "Peter Euclide",
data_location = "Documents/GitHub/peuclide.github.io/CV_data.xlsx",
pdf_location = "https://github.com/peuclide/peuclide.github.io/blob/master/ddCV.pdf",
html_location = "https://peuclide.github.io/CV",
source_location = "https://github.com/peuclide/peuclide.github.io/blob/master/"
)
# run ?datadrivencv::use_datadriven_cv to see more details
datadrivencv::use_datadriven_cv(
full_name = "Peter Euclide",
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit#gid=917338460",
pdf_location = "https://github.com/peuclide/peuclide.github.io/blob/master/ddCV.pdf",
html_location = "https://peuclide.github.io/CV",
source_location = "https://github.com/peuclide/peuclide.github.io/blob/master/"
)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# run ?datadrivencv::use_datadriven_cv to see more details
datadrivencv::use_datadriven_cv(
full_name = "Peter Euclide",
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_location = "https://github.com/peuclide/peuclide.github.io/blob/master/ddCV.pdf",
html_location = "https://peuclide.github.io/CV",
source_location = "https://github.com/peuclide/peuclide.github.io/blob/master/"
)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# run ?datadrivencv::use_datadriven_cv to see more details
datadrivencv::use_datadriven_cv(
full_name = "Peter Euclide",
data_location = "Documents/GitHub/peuclide.github.io/ddCV/",
pdf_location = "https://github.com/peuclide/peuclide.github.io/blob/master/ddCV.pdf",
html_location = "https://peuclide.github.io/CV",
source_location = "https://github.com/peuclide/peuclide.github.io/blob/master/"
)
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "Documents/GitHub/peuclide.github.io/ddCV/",
pdf_mode = params$pdf_mode
)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
View(params)
View(create_CV_object)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# Read in all data and initialize a CV printer object
CV <- create_CV_object(
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_mode = params$pdf_mode
)
# When in pdf export mode the little dots are unaligned, so fix that with some conditional CSS.
if(params$pdf_mode) {
cat("
<style>
:root{
--decorator-outer-offset-left: -6.5px;
}
</style>")
}
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
knitr::opts_chunk$set(
results='asis',
echo = FALSE
)
library(magrittr) # For the pipe
source("cv_printing_functions.r")
source()
pwd
pwd()
getwd()
source("/Users/petereuclidecv_printing_functions.r")
source("/Users/petereuclide/cv_printing_functions.r")
setwd("~/Documents/GitHub/peuclide.github.io")
setwd("~/Documents/GitHub/peuclide.github.io/ddCV")
datadrivencv::use_datadriven_cv(
full_name = "Peter Euclide",
data_location = "https://docs.google.com/spreadsheets/d/138mMbwEgLvqizPHDJBIjBt68UaiaPOUiCtU93oSi87Q/edit?usp=sharing",
pdf_location = "https://github.com/peuclide/peuclide.github.io/blob/master/ddCV.pdf",
html_location = "https://peuclide.github.io/CV",
source_location = "https://github.com/peuclide/peuclide.github.io/blob/master/"
)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
CV %<>% print_section('research_positions')
CV %<>% print_section('research_presentations')
CV %<>% print_text_block('industy_experience_aside')
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
CV %<>% print_section('invited_presentations')
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
CV %<>% print_section('invited_presentations')
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
??icon
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
??
??print_skill_bars()
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
source("map.r")
source("./map.R")
source("./map.R")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
