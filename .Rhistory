df
ggplot(df, aes(grp, fill = month)) +
geom_waffle(stat="identity")
ggplot(df, aes(grp,N, fill = month)) +
geom_waffle(stat="identity")
ggplot(df, aes(x,y, fill = month)) +
geom_waffle(stat="identity")
ggplot(df, aes(month,N, fill = grp)) +
geom_waffle(stat="identity")
ggplot(df, aes(month,N, fill = grp)) +
geom_waffle()
library(waffle)
ggplot(df, aes(month,N, fill = grp)) +
geom_waffle()
parts <- c('TRUE' = 3, 'FALSE' = 77)
p <- waffle(parts, rows = 8, colors = c("black", "grey70"))
p
parts
df
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf
xdf %>%
count(parts, wt = vals)
#Unimpaired
library(tidyverse)
xdf %>%
count(parts, wt = vals)
df
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white", flip = TRUE)
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white", flip = TRUE)
?GeomWaffle
?geom_waffle
(
ggplot(data = waffle_iron(mpg, aes_d(group = class)), aes(x, y, fill = group)) +
geom_waffle() +
coord_equal()
ggplot(data = waffle_iron(mpg, aes_d(group = class)), aes(x, y, fill = group)) +
geom_waffle() +
coord_equal()
mpg
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df <- read.csv("./Desktop/syds_df.csv")
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
df
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
ggplot(data = waffle_iron(df, aes_d(group = age)), aes(x, y, fill = age)) +
geom_waffle() +
coord_equal()
df <- read.csv("./Desktop/syds_df.csv")
ggplot(data = waffle_iron(df, aes_d(group = month)), aes(x, y, fill = month)) +
geom_waffle() +
coord_equal()
df
df <- read.csv("./Desktop/syds_df_2.csv")
df
str(df)
df  %>%
ggplot(aes(fill = month, x,y,values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df
df  %>%
ggplot(aes(fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df  %>%
ggplot(aes(x,y,fill = month, values = N)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
df  %>%
ggplot(aes(x,y,fill = month,)) +
geom_waffle(n_rows = 10, size = 0.33, colour = "white")
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
library(tidyverse)
#library(hrbrthemes)
library(waffle)
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
xdf
ggplot(xdf, aes(fill=parts, values=values)) +
geom_waffle(color = "white", size=1.125, n_rows = 6) +
facet_wrap(~fct, ncol=1) +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
#ggthemes::scale_fill_tableau(name=NULL) +
coord_equal() +
labs(
title = "Faceted Waffle Geoms"
) +
#theme_ipsum_rc(grid="") +
theme_enhance_waffle()
#library(hrbrthemes)
library(waffle)
?waffle
parts <- c(80, 30, 20, 10)
chart <- waffle(parts, rows=8)
print(chart)
df
df
df <- read.csv("./Desktop/syds_df.csv")
df
df <- read.csv("./Desktop/syds_df_2.csv")
df
parts <- c(1,3,6)
chart <- waffle(parts, rows=2)
print(chart)
unimpared <- c(6,3,1)
impared <- c(1,3,6)
unimpared <- c(6,3,1)
chart1 <- waffle(impared, rows=2)
char2 <- waffle(unimpared, rows = 2)
chart2 <- waffle(unimpared, rows = 2)
chart1
chart2
install.packages(ggpubr)
install.packages(ggp"ubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(waffle)
library(tidyverse)
library(ggpubr)
chart1 <- waffle(impared, rows=2, flip=T)
chart2 <- waffle(unimpared, rows = 2, flip =T)
impared <- c(1,3,6)
unimpared <- c(6,3,1)
chart1 <- waffle(impared, rows=2, flip=T)
chart2 <- waffle(unimpared, rows = 2, flip =T)
chart1
ggarrange(chart1, chart2)
waffle()
?waffle
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired")
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired")
ggarrange(chart1, chart2)
ggarrange(chart1, chart2, colors = c("white", "gray", "black"))
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired", colors = c("white", "gray", "black"))
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired", colors = c("white", "gray", "black"))
ggarrange(chart1, chart2)
ggarrange(chart2, chart1 )
?ggarragne
?ggarrange
ggarrange(chart2, chart1, common.legend = T )
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
waffle
?waffle
df
5
impared <- c("3"=1,"15"=3,"22"=6)
unimpared <- c("3"=6,"15"=3,"22"=1)
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))+them_bw
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
ggplot(xdf, aes(fill=parts, values=values)) +
geom_waffle(color = "white", size=1.125, n_rows = 6) +
facet_wrap(~fct, ncol=1) +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
ggthemes::scale_fill_tableau(name=NULL) +
coord_equal() +
labs(
title = "Faceted Waffle Geoms"
) +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
class(chart1)
chat1+theme_bw()
chart1+theme_bw()
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart1+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
chart1 <- waffle(impared, rows=2, flip=T, xlab = "Impaired",
colors = c("white", "gray", "black"))
chart1+theme_bw()
chart2 <- waffle(unimpared, rows = 2, flip =T, xlab= "Unimpaired",
colors = c("white", "gray", "black"))
chart2+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
ggarrange(chart2+theme_bw(), chart1+theme_bw(), common.legend = T, legend = "right" )
chart1 <- chart1+theme_bw()
chart2 <- chart2+theme_bw()
ggarrange(chart2, chart1, common.legend = T, legend = "right" )
install.packages("installr")
LTRM <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/LTRM_totalcatch_2016_2018.csv")
MC <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/MC_totalcatch_2017_2018.csv")
UMR19 <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/UMR19_totalcatch_2018.csv")
names <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/namebridge.csv")
library(tidyverse)
head(LTRM)
head(LTRM)
LTRM %>% left_join(names[,c("com_name", "ltrm_name")], by ="ltrm_name")
LTRM %>% left_join(.,names[,c("com_name", "ltrm_name")], by ="ltrm_name")
x <- LTRM %>% left_join(.,names[,c("com_name", "ltrm_name")], by ="ltrm_name")
View(x)
names[,c("com_name", "ltrm_name")]
names[,c("com_name", "ltrm_name")]
View(LTRM)
View(names[,c("ltrm_names", "com_name")])
View(names[,c("ltrm_names", "com_names")])
View(names[,c("com_name", "ltrm_name")])
View(MC)
x <- left_join(LTRM,names[names$lter_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")], by ="ltrm_name")
View(x)
test <- names[names$lter_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
test
View(test)
names$lter_name
test <- names[names$ltrm_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
test
View(test)
View(LTRM)
names <- read.csv("./OneDrive - UWSP/UWSP_Larson_2018/projects/eDNA/catch_data/june_10_email/namebridge.csv")
test <- names[names$ltrm_name%in%unique(LTRM$ltrm_name),c("com_name", "ltrm_name")]
View(test)
x <- left_join(LTRM,, by ="ltrm_name")
unique(LTRM$ltrm_name)
unique(names[names$ltrm_name)
unique(names[names$ltrm_name])
unique(names$ltrm_name)
x <- read.csv("./OneDrive - UWSP/Panel6_609loci_WL.csv")
devtools::install_github("nstrayer/datadrivencv")
library(leaflet)
library(rgdal)
library(dataRetrieval)
# grp <- c("USGS Topo", "USGS Imagery Only", "USGS Imagery Topo",
#          "USGS Shaded Relief", "Hydrography")
#
# att <- paste0("<a href='https://www.usgs.gov/'>",
#               "U.S. Geological Survey</a> | ",
#               "<a href='https://www.usgs.gov/laws/policies_notices.html'>",
#               "Policies</a>")
# GetURL <- function(service, host = "basemap.nationalmap.gov") {
#   sprintf("https://%s/arcgis/services/%s/MapServer/WmsServer", host, service)
# }
sites <- read.csv("./sample_coords.csv")
# create specific icon for every type of point
icon.walleye <- makeAwesomeIcon(icon= 'flag', markerColor = 'blue', iconColor = 'black')
icon.darter <- makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'black')
icon.sculpin <- makeAwesomeIcon(icon = 'flag', markerColor = 'green', iconColor = 'black')
icon.smelt <- makeAwesomeIcon(icon = 'flag', markerColor = 'orange', iconColor = 'black')
icon.mysis <- makeAwesomeIcon(icon = 'flag', markerColor = 'cadetblue', iconColor = 'black')
icon.whitefish <- makeAwesomeIcon(icon = 'flag', markerColor = 'white', iconColor = 'black')
icon.smallmouth <- makeAwesomeIcon(icon = 'flag', markerColor = 'black', iconColor = 'red')
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(data = sites[sites$species == "walleye",],
group = "walleye",
icon = icon.walleye,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= paste(sep = "<br/>","Euclide et al. in prep",
"<b><a href='https://doi.org/10.1002/tafs.10215'>Chen et al. 2019</a></b>")) %>%
addAwesomeMarkers(data = sites[sites$species == "smallmouth bass",],
group = "smallmouth bass",
icon = icon.smallmouth,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= "Euclide et al. in review") %>%
addAwesomeMarkers(data = sites[sites$species == "tessellated darters",],
group = "tessellated darters",
icon = icon.darter,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup='<b><a href="https://doi.org/10.1007/s10592-018-1107-2">Euclide & Marsden 2018</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "slimy sculpin",],
group = "slimy sculpin",
icon = icon.sculpin,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup='<b><a href="https://doi.org/10.1111/eff.12385">Euclide et al. 2017</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "rainbow smelt",],
group = "rainbow smelt",
icon = icon.smelt,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= '<b><a href="https://doi.org/10.1016/j.jglr.2020.02.009">Euclide et al. 2020</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "mysis",],
group = "mysis",
icon = icon.mysis,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= paste(sep = "<br/>",
"<b><a href='10.1007/s10750-016-2982-5'>Euclide et al. 2017</a></b>",
"<b><a href='https://doi.org/10.1016/j.jglr.2015.05.002'>Euclide & Stockwell 2015</a></b>")) %>%
addAwesomeMarkers(data = sites[sites$species == "whitefish",],
group = "whitefish",
icon = icon.whitefish,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= "<b><a href='https://doi.org/10.1016/j.jglr.2019.09.010'>Euclide et al. 2019</a></b>") %>%
addLayersControl(
overlayGroups = c("walleye", "tessellated darters", "rainbow smelt", "slimy sculpin", "mysis", "whitefish", "smallmouth bass" ),
options = layersControlOptions(collapsed = FALSE), position = "topright"
)
library(leaflet)
library(rgdal)
library(dataRetrieval)
# grp <- c("USGS Topo", "USGS Imagery Only", "USGS Imagery Topo",
#          "USGS Shaded Relief", "Hydrography")
#
# att <- paste0("<a href='https://www.usgs.gov/'>",
#               "U.S. Geological Survey</a> | ",
#               "<a href='https://www.usgs.gov/laws/policies_notices.html'>",
#               "Policies</a>")
# GetURL <- function(service, host = "basemap.nationalmap.gov") {
#   sprintf("https://%s/arcgis/services/%s/MapServer/WmsServer", host, service)
# }
sites <- read.csv("./sample_coords.csv")
sites <- read.csv("../sample_coords.csv")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
source("../sample_map.R")
source("../sample_map.Rmd")
# Build interactive network of positions colored by section
# and connected if they occurred in the same year
#datadrivencv::build_network_logo(CV$entries_data)
source("./map.R")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
getwd()
setwd("~/Documents/GitHub/peuclide.github.io/ddCV")
setwd("~/Documents/GitHub/peuclide.github.io/ddCV")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Build interactive network of positions colored by section
# and connected if they occurred in the same year
#datadrivencv::build_network_logo(CV$entries_data)
#source("./map.R")
library(leaflet)
library(rgdal)
library(dataRetrieval)
# grp <- c("USGS Topo", "USGS Imagery Only", "USGS Imagery Topo",
#          "USGS Shaded Relief", "Hydrography")
#
# att <- paste0("<a href='https://www.usgs.gov/'>",
#               "U.S. Geological Survey</a> | ",
#               "<a href='https://www.usgs.gov/laws/policies_notices.html'>",
#               "Policies</a>")
# GetURL <- function(service, host = "basemap.nationalmap.gov") {
#   sprintf("https://%s/arcgis/services/%s/MapServer/WmsServer", host, service)
# }
sites <- read.csv("../sample_coords.csv")
# create specific icon for every type of point
icon.walleye <- makeAwesomeIcon(icon= 'flag', markerColor = 'blue', iconColor = 'black')
icon.darter <- makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'black')
icon.sculpin <- makeAwesomeIcon(icon = 'flag', markerColor = 'green', iconColor = 'black')
icon.smelt <- makeAwesomeIcon(icon = 'flag', markerColor = 'orange', iconColor = 'black')
icon.mysis <- makeAwesomeIcon(icon = 'flag', markerColor = 'cadetblue', iconColor = 'black')
icon.whitefish <- makeAwesomeIcon(icon = 'flag', markerColor = 'white', iconColor = 'black')
icon.smallmouth <- makeAwesomeIcon(icon = 'flag', markerColor = 'black', iconColor = 'red')
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(data = sites[sites$species == "walleye",],
group = "walleye",
icon = icon.walleye,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= paste(sep = "<br/>","Euclide et al. in prep",
"<b><a href='https://doi.org/10.1002/tafs.10215'>Chen et al. 2019</a></b>")) %>%
addAwesomeMarkers(data = sites[sites$species == "smallmouth bass",],
group = "smallmouth bass",
icon = icon.smallmouth,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= "Euclide et al. in review") %>%
addAwesomeMarkers(data = sites[sites$species == "tessellated darters",],
group = "tessellated darters",
icon = icon.darter,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup='<b><a href="https://doi.org/10.1007/s10592-018-1107-2">Euclide & Marsden 2018</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "slimy sculpin",],
group = "slimy sculpin",
icon = icon.sculpin,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup='<b><a href="https://doi.org/10.1111/eff.12385">Euclide et al. 2017</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "rainbow smelt",],
group = "rainbow smelt",
icon = icon.smelt,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= '<b><a href="https://doi.org/10.1016/j.jglr.2020.02.009">Euclide et al. 2020</a></b>')%>%
addAwesomeMarkers(data = sites[sites$species == "mysis",],
group = "mysis",
icon = icon.mysis,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= paste(sep = "<br/>",
"<b><a href='10.1007/s10750-016-2982-5'>Euclide et al. 2017</a></b>",
"<b><a href='https://doi.org/10.1016/j.jglr.2015.05.002'>Euclide & Stockwell 2015</a></b>")) %>%
addAwesomeMarkers(data = sites[sites$species == "whitefish",],
group = "whitefish",
icon = icon.whitefish,
label = ~as.character(species),
clusterOptions = markerClusterOptions(),
popup= "<b><a href='https://doi.org/10.1016/j.jglr.2019.09.010'>Euclide et al. 2019</a></b>") %>%
addLayersControl(
overlayGroups = c("walleye", "tessellated darters", "rainbow smelt", "slimy sculpin", "mysis", "whitefish", "smallmouth bass" ),
options = layersControlOptions(collapsed = FALSE), position = "topright"
)
source('~/Documents/GitHub/peuclide.github.io/ddCV/render_cv.R')
??build_network_logo
build_network_logo
build_network_logo()
View(build_network_logo)
View(build_network_logo())
View(datadrivencv::build_network_logo())
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
build_network_logo()
View(build_network_logo)
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
source('~/Documents/GitHub/peuclide.github.io/build_site.R')
source('~/Documents/GitHub/peuclide.github.io/build_site.R')
source('~/Documents/GitHub/peuclide.github.io/build_site.R')
