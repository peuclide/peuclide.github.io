dat <- read.csv("/Volumes/NO NAME/Walleye_data/wall_p1&2&RR.txt")
setwd("~/Dropbox/Genetics/walleye_analysis/file_conversion")
dat <- read.csv("wall_p1&2&RR.csv")
dat <- dat[,c(2,4,12,13)]
dat[is.na(dat)] <- ""
dat$Allele.1 <- gsub("?",0,dat$Allele.1, fixed=TRUE)
dat$Allele.2 <- gsub("?",0,dat$Allele.2, fixed=TRUE)
dat$Allele.1[dat$Allele.1==""]<-0
dat[is.na(dat)] <- ""
x <- subset(dat, !(Allele.2==0|Allele.1 == 0))
y <- subset(dat, Allele.2==0|Allele.1 == 0)
y$Allele.1 <- 0
y$Allele.2 <- 0
dat <- rbind(x,y)
hets <- subset(dat, Allele.2!="")
homos <- subset(dat, Allele.2=="")
homos$Allele.2 <- homos$Allele.1
dat <- rbind(hets, homos)
dat$Allele.1 <- as.numeric(as.character(dat$Allele.1))
dat$Allele.2 <- as.numeric(as.character(dat$Allele.2))
dat_test <- subset(dat, Allele.1 != 0)
dat_test <- subset(dat, Allele.2 != 0)
x <- dat_test
dat2 <- reshape(x, timevar="Marker", idvar = "Sample.Name",  direction="wide")
dat2[is.na(dat2)] <- 0
fish <- read.csv("wall_samples.csv")
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
samplingLocations <- levels(fish$Collection.Location)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
}
dat3 <- cbind(dat2, as.data.frame(location))
str(dat3)
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7")
fin.dat3 <- dat3[,colOrder]
fin.dat3 <- dat3[,colOrder]
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7")
fin.dat3 <- dat3[,colOrder]
fin.dat3 <- dat3[,c(1, 16,  12,13, 6,7, 4,5, 8,9, 10,11, 2,3, 14,15)]
colOrder
str(dat3)
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7")
colOrder
str(dat3)
str(dat)
levels(dat$Marker)
dat <- read.csv("/Volumes/NO NAME/Walleye_data/Wall_2017_Euclide_wargo_10-23-17.csv")
dat <-  read.csv("walltot_report_11-29-17.csv")
dat <- dat[,c(2,4,12,13)]
dat[is.na(dat)] <- ""
dat$Allele.1 <- gsub("?",0,dat$Allele.1, fixed=TRUE)
dat$Allele.2 <- gsub("?",0,dat$Allele.2, fixed=TRUE)
dat$Allele.1[dat$Allele.1==""]<-0
dat[is.na(dat)] <- ""
x <- subset(dat, !(Allele.2==0|Allele.1 == 0))
y <- subset(dat, Allele.2==0|Allele.1 == 0)
y$Allele.1 <- 0
y$Allele.2 <- 0
dat <- rbind(x,y)
hets <- subset(dat, Allele.2!="")
homos <- subset(dat, Allele.2=="")
homos$Allele.2 <- homos$Allele.1
dat <- rbind(hets, homos)
dat$Allele.1 <- as.numeric(as.character(dat$Allele.1))
dat$Allele.2 <- as.numeric(as.character(dat$Allele.2))
dat_test <- subset(dat, Allele.1 != 0)
dat_test <- subset(dat, Allele.2 != 0)
x <- dat_test
dat2 <- reshape(x, timevar="Marker", idvar = "Sample.Name",  direction="wide")
dat2[is.na(dat2)] <- 0
fish <- read.csv("wall_samples.csv")
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
samplingLocations <- levels(fish$Collection.Location)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
}
dat3 <- cbind(dat2, as.data.frame(location))
str(dat3)
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7")
fin.dat3 <- dat3[,c(1, 16,  12,13, 6,7, 4,5, 8,9, 10,11, 2,3, 14,15)]
fin.dat3 <- dat3[,colOrder]
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rr.csv")
library(ParallelStructure)
library(Rmpi)
setwd("/Applications/STRUCTUREconsole/")
data(structure_data)
data(structure_jobs)
write(t(structure_jobs), ncol=length(structure_jobs[1,]), file='joblist1.txt')
write(t(structure_data), ncol=length(structure_data[1,]), file='example_data.txt')
STR_path= "/Applications/STRUCTUREconsole/"
parallel_structure(structure_path=STR_path, joblist='./joblists/wall_joblist1.txt', n_cpu=4, infile='./data/wallPlate1&2&rr_STR.str', outpath='./outfiles/wall_11-29-17',onerowperind=1, popflag=1, numinds=90, numloci=9, printqhat=1, plot_output=1)
parallel_structure(structure_path=STR_path, joblist='./joblists/wall_joblist1.txt', n_cpu=4, infile='./data/wallPlate1&2&rr_STR.str', outpath='./outfiles/wall_11-29-17',onerowperind=1, popflag=1, numinds=90, numloci=9, printqhat=1, plot_output=1)
str(fish)
sex <- levels(fish$Sex..M.F..or.Unk.)
sex
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,samplingLocations[tmp])
}
dat3 <- cbind(dat2, as.data.frame(location))
dat3
dat3 <- cbind(dat2, as.data.frame(location), as.data.frame(sex))
sex
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,samplingLocations[tmpSex])
}
sex
tmpSex
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
sex <- NULL
samplingLocations <- levels(fish$Collection.Location)
sex <- levels(fish$Sex..M.F..or.Unk.)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,samplingLocations[tmpSex])
}
sex
sexLevels <- levels(fish$Sex..M.F..or.Unk.)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,sexLevels[tmpSex])
}
sex
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
sex <- NULL
samplingLocations <- levels(fish$Collection.Location)
sexLevels <- levels(fish$Sex..M.F..or.Unk.)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,sexLevels[tmpSex])
}
dat3 <- cbind(dat2, as.data.frame(location), as.data.frame(sex))
dat3
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7","sex")
fin.dat3 <- dat3[,colOrder]
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rr.csv")
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rr.csv")
dat <-  read.csv("Wall_P1&2&RR_11-29-17.csv")
dat <- dat[,c(2,4,12,13)]
dat[is.na(dat)] <- ""
dat$Allele.1 <- gsub("?",0,dat$Allele.1, fixed=TRUE)
dat$Allele.2 <- gsub("?",0,dat$Allele.2, fixed=TRUE)
dat$Allele.1[dat$Allele.1==""]<-0
dat[is.na(dat)] <- ""
x <- subset(dat, !(Allele.2==0|Allele.1 == 0))
y <- subset(dat, Allele.2==0|Allele.1 == 0)
y$Allele.1 <- 0
y$Allele.2 <- 0
dat <- rbind(x,y)
hets <- subset(dat, Allele.2!="")
homos <- subset(dat, Allele.2=="")
homos$Allele.2 <- homos$Allele.1
dat <- rbind(hets, homos)
dat$Allele.1 <- as.numeric(as.character(dat$Allele.1))
dat$Allele.2 <- as.numeric(as.character(dat$Allele.2))
dat_test <- subset(dat, Allele.1 != 0)
dat_test <- subset(dat, Allele.2 != 0)
x <- dat_test
dat2 <- reshape(x, timevar="Marker", idvar = "Sample.Name",  direction="wide")
dat2[is.na(dat2)] <- 0
fish <- read.csv("wall_samples.csv")
SampID <- dat2$Sample.Name #"Sample.Name" if ID not reformatted
location <- NULL
sex <- NULL
samplingLocations <- levels(fish$Collection.Location)
sexLevels <- levels(fish$Sex..M.F..or.Unk.)
for(gt in SampID){
tmp <-fish$Collection.Location[fish$Sample.ID==gt]
location <- c(location,samplingLocations[tmp])
tmpSex <-fish$Sex..M.F..or.Unk.[fish$Sample.ID==gt]
sex <- c(sex,sexLevels[tmpSex])
}
dat3 <- cbind(dat2, as.data.frame(location), as.data.frame(sex))
View(dat3)
dat_test <- subset(dat, Allele.1 != 0)
dat_test <- subset(dat, Allele.2 != 0)
x <- dat_test
dat2 <- reshape(x, timevar="Marker", idvar = "Sample.Name",  direction="wide")
head(dat)
View(dat)
View(dat_test)
colOrder <- c("Sample.Name", "location", "Allele.1.Svi2y",	"Allele.2.Svi2y",	"Allele.1.SviL6",	"Allele.2.SviL6",	"Allele.1.SviL4g",	"Allele.2.SviL4g",	"Allele.1.SviL8",	"Allele.2.SviL8",	"Allele.1.SviL5",
"Allele.2.SviL5",	"Allele.1.Svi7",	"Allele.2.Svi7",	"Allele.1.Svi6",	"Allele.2.Svi6",	"Allele.1.Svi4",	"Allele.2.Svi4","Allele.1.sviL7","Allele.2.sviL7","sex")
fin.dat3 <- dat3[,colOrder]
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rr.csv")
colnames(fin.dat3) <- c("Sample.Name", "location","Svi2y",	"Svi2y",	"SviL6"	, "SviL6",	"SviL4g",	"SviL4g",	"SviL8",	"SviL8",	"SviL5",	"SviL5",	"Svi7",	"Svi7",	"Svi6",
"Svi6",	"Svi4",	"Svi4",	"sviL7",	"sviL7",	"sex")
View(fin.dat3)
write.csv(fin.dat3, "/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rr.csv")
parallel_structure(structure_path=STR_path, joblist='./joblists/wall_joblist1.txt', n_cpu=4, infile='./data/wallPlate1&2&rr_STR.str', outpath='./outfiles/wall_11-29-17',onerowperind=1, popflag=1, numinds=90, numloci=9, printqhat=1, plot_output=1)
parallel_structure(structure_path=STR_path, joblist='./joblists/wall_joblist1.txt', n_cpu=4, infile='./data/wall_p1&2&RR_str.str', outpath='./outfiles/wall_11-29-17',onerowperind=1, popflag=1, numinds=90, numloci=9, printqhat=1, plot_output=1)
setwd("~/Dropbox/Genetics/walleye_analysis/diveRsity")
filepath="/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rrGP.txt"
output_dir="/Users/peuclide/Dropbox/Genetics/walleye_analysis/diveRsity/"
genepop_detective(genepop=filepath,"Loci")
library(diveRsity)
library(diveRsity)
library(genepopedit)
genepop_detective(genepop=filepath,"Loci")
BS <- basicStats(infile = "/Users/peuclide/Dropbox/Genetics/Sculpin_analysis/Ontario_Data/PCA/genpop_champScul.gen", outfile = NULL, fis_ci = FALSE,
ar_ci = FALSE, fis_boots = NULL, ar_boots = NULL,
mc_reps = 9999, rarefaction = TRUE, ar_alpha = 0.05,
fis_alpha = 0.05)
filepath="/Users/peuclide/Dropbox/Genetics/walleye_analysis/file_conversion/wallPlate1&2&rrGP.txt"
genepop_detective(genepop=filepath,"Loci")
genepop_detective(genepop=filepath,"Pops")
setwd("~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
rmarkdown::render_site()
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
setwd("~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io")
rmarkdown::render_site()
setwd("~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io")
rmarkdown::render_site()
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
source('~/Documents/OneDrive/Rmd_website_Peter/peuclide.github.io/build_site.R', echo=TRUE)
read.csv("https://raw.githubusercontent.com/peuclide/Mysis_density_app/master/MysisDensity12-8-16.csv")
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=mysis$Longitude, lat=mysis$Latitude, popup="Data locations")
library(leaflet)
library(plyr)
library(ggmap)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=mysis$Longitude, lat=mysis$Latitude, popup="Data locations")
mysis <- read.csv("MysisDensity12-8-16.csv")
mysis <- read.csv("https://raw.githubusercontent.com/peuclide/Mysis_density_app/master/MysisDensity12-8-16.csv")
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=mysis$Longitude, lat=mysis$Latitude, popup="Data locations")
View(mysis)
ggplot( mysis, aes(Lake, ave.den.per.m2))+
geom_boxplot(fill = "#56B4E9") +
theme_bw()+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 90, hjust = 1, size = 14))+
ggtitle(input$Title)+
labs(y = expression(Density~~"(ind"/m^"2"*")"))
ggplot( mysis, aes(Lake, ave.den.per.m2))+
geom_boxplot(fill = "#56B4E9") +
theme_bw()+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 90, hjust = 1, size = 14))+
ggtitle("Title")+
labs(y = expression(Density~~"(ind"/m^"2"*")"))
